generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  hashedPassword  String?
  emailVerified   Boolean   @default(false)
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  chats             Chat[]
  generationBatches GenerationBatch[]
  generations       ImageGeneration[]
  favorites         Favorite[]

  @@map("users")
}

model Account {
  id                       String    @id @default(cuid())
  userId                   String
  accountId                String    
  providerId               String    
  accessToken              String?   
  refreshToken             String?   
  accessTokenExpiresAt     DateTime? 
  refreshTokenExpiresAt    DateTime? 
  scope                    String?   
  idToken                  String?   
  password                 String?   
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique  
  userId    String
  expiresAt DateTime              
  ipAddress String?               
  userAgent String?               
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, value])
  @@map("verifications")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expiresAt  DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations GenerationBatch[]

  @@map("chats")
}

model GenerationBatch {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  prompt    String
  createdAt DateTime @default(now())

  chat        Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations ImageGeneration[]

  @@map("generation_batches")
}

model ImageGeneration {
  id          String    @id @default(cuid())
  batchId     String
  userId      String
  model       String // 'dalle-3', 'midjourney', 'flux', etc.
  imageUrl    String?
  status      String    @default("pending") // pending, completed, failed
  errorMsg    String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  batch     GenerationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]

  @@map("image_generations")
}

model Favorite {
  id           String   @id @default(cuid())
  userId       String
  generationId String
  createdAt    DateTime @default(now())

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation ImageGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@unique([userId, generationId])
  @@map("favorites")
}